<?php


namespace SlavaWins\AuthSms\IntegrationTests;

//use PHPUnit\Framework\TestCase;
use Illuminate\Support\Facades\Cache;
use SlavaWins\AuthSms\Models\PhoneVertify;
use Tests\TestCase;

class LoginAuthTest extends TestCase
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub


        Cache::flush();
        PhoneVertify::where("id", ">", 0)->delete();
    }

    public function IsErrorResponse()
    {
        if (!session()->has('errors')) return null;
        return session()->get('errors')->first();
    }


    public function test_SuccessCasePhone()
    {
        config(["authsms.AUTHSMS_USE_MAIL" => false]);

        $result = $this->post("/auth-email");
        $this->assertEquals(404, $result->status());

        $result = $this->post("/auth/password/1");
        $this->assertEquals(404, $result->status());


        $result = $this->get("/auth");
        $this->assertEquals(200, $result->status());
        $this->stringContains("Введите номер телефона", $result->getContent());


        $result = $this->post("/auth", ['login' => "09999999864"]);
        $this->assertEquals("Количество символов в поле телефон не может превышать 10.", self::IsErrorResponse(session()));


        $result = $this->post("/auth", ['login' => "9999999862"]);
        $this->assertEquals(200, $result->status());
        $this->stringContains("Введите код", $result->getContent());

        $getLastCode = PhoneVertify::orderByDesc("id")->first();


        $result = $this->post("/auth/code/" . $getLastCode->id, ['code' => "1112"]);
        $this->assertEquals("Не верный код попробуйте ещё раз. Осталось попыток: 2", $this->IsErrorResponse());
        $this->assertEquals(302, $result->status());

        $result = $this->post("/auth/code/" . $getLastCode->id, ['code' => "1111"]);
        $this->assertEquals(302, $result->status());
        $this->assertNull($this->IsErrorResponse());
        $this->assertNotNull(\Auth::user());
    }


    public function test_SingleCodeUse()
    {
        config(["authsms.AUTHSMS_USE_MAIL" => false]);

        $result = $this->post("/auth", ['login' => "9999999862"]);
        $this->assertEquals(200, $result->status());
        $this->stringContains("Введите код", $result->getContent());

        $getLastCode = PhoneVertify::orderByDesc("id")->first();

        $result = $this->post("/auth/code/" . $getLastCode->id, ['code' => "1111"]);
        $this->assertEquals(302, $result->status());
        $this->assertNotNull(\Auth::user());
        \Auth::logout();
        $this->assertNull(\Auth::user());


        $result = $this->post("/auth/code/" . $getLastCode->id, ['code' => "1111"]);
        $this->assertEquals(302, $result->status());
        $this->assertNull(\Auth::user());


    }

    public function test_BadCasePhone()
    {
        config(["authsms.AUTHSMS_USE_MAIL" => false]);


        $result = $this->post("/auth", ['login' => "9999999862"]);
        $this->assertEquals(200, $result->status());

        $getLastCode = PhoneVertify::orderByDesc("id")->first();

        $result = $this->post("/auth/code/" . $getLastCode->id, ['code' => "1112"]);
        $this->assertEquals("Не верный код попробуйте ещё раз. Осталось попыток: 2", $this->IsErrorResponse());
        $this->assertEquals(302, $result->status());



        $getLastCode->created_at = $getLastCode->created_at->addSeconds(60 * -51);
        $getLastCode->save();
        $result = $this->post("/auth/code/" . $getLastCode->id, ['code' => "1111"]);
        $this->assertEquals("Код устарел, повторите авторизацию", $this->IsErrorResponse());
        $this->assertEquals(302, $result->status());

    }


    public function test_SuccessCaseEmail()
    {

        config(["authsms.AUTHSMS_USE_MAIL" => true]);

        $email = "real@mail.ru";

        $result = $this->post("/auth");
        $this->assertEquals(404, $result->status());

        $result = $this->post("/auth/code/1");
        $this->assertEquals(404, $result->status());


        $result = $this->get("/auth");
        $this->assertEquals(200, $result->status());
        $this->stringContains("Введите номер телефона", $result->getContent());


        $result = $this->post("/auth-email", ['login' => "tesetameial.mail.ru"]);
        $this->assertEquals("Поле почта должно быть действительным электронным адресом.", $this->IsErrorResponse());


        $result = $this->post("/auth-email", ['login' => $email]);
        $this->assertEquals(200, $result->status());
        $this->stringContains("Введите код", $result->getContent());

        $getLastCode = PhoneVertify::orderByDesc("id")->first();


        $result = $this->post("/auth/code/" . $getLastCode->id, ['code' => "1112"]);
        $this->assertEquals("Не верный код попробуйте ещё раз. Осталось попыток: 2", $this->IsErrorResponse());
        $this->assertEquals(302, $result->status());

        $result = $this->post("/auth/code/" . $getLastCode->id, ['code' => "1111"]);
        $this->assertEquals(302, $result->status());
        $this->assertNull($this->IsErrorResponse());
        $this->assertNotNull(\Auth::user());
    }

}

